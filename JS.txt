Scope
	LocalScope
	GlobalScope
IIFE (Immediately Invoked Function Expession)
Hoisting
Closures
Callbacks
Promises
Async & Await
Call Stack
Primitive Types
Value Types and Reference Types
Implicit, Explicit, Nominal, Structuring and Duck Typing
== vs === vs typeof
Function Scope, Block Scope and Lexical Scope
Expression vs Statement
IIFE, Modules and Namespaces
Message Queue and Event Loop
setTimeout, setInterval and requestAnimationFrame
JavaScript Engines
Bitwise Operators, Type Arrays and Array Buffers
DOM and Layout Trees
Factories and Classes
this, call, apply and bind
new, Constructor, instanceof and Instances
Prototype Inheritance and Prototype Chain
Object.create and Object.assign
map, reduce, filter
Pure Functions, Side Effects, State Mutation and Event Propagation
Closures
High Order Functions
Recursion
Collections and Generators
Promises
async/await
Data Structures
Expensive Operation and Big O Notation
Algorithms
Inheritance, Polymorphism and Code Reuse
Design Patterns
Partial Applications, Currying, Compose and Pipe
Clean Code

Console. , debug :	log, error, warn, time, timeEnd, dir, table, assert
			debugger

Iterations:	Intimately associated with Arrays is iterating through them using loops. In JS, we can use five different control structures for iterations. The most customizable is the for loop, which we can use to iterate through array indexes in almost any order. If the number of iterations cannot be determined, we can use while and do while loops until a certain condition is met. FOr any object, we can use the for in and for of loops to iterate through its keys and values, respectively. To get both simultaneously, we can loop through its entries(). We can also break out of a loop at any time using a break statement, or skip ahead to the next iteration using continue statement. For the most control, iterating through generator functions is the best.
		Native array methods that iterate through all its items are: indexOf, lastIndexOf, includes, fill, and join. Additionally, we can provide a callback function to the following methods: findIndex, find, filter, forEach, map, some, every, and reduce.

Recursions: 	any iterative function can be reproduced with a recursive one, and vice versa. Sometimes, a recursive approach is cleaner, cleaner, and more elegant. example:
	const factorial = number => {
		let product = 1;
		for (let i = 2; i <= number; i++) {
			product *=i;
		}
		return product;
	}
	Expressed as a recursive function, only one line of code is needed
	const factorial = number => number < 2 ? 1: number * factorial(number - 1)
		All recursive functions share a common pattern. They are made from creating a recursive part that calls itself, and a base case that does not. Whenever a function calls itself, it pushes a new execution context to the execution stack. This continues until the base case is met, the the stack unwinds as contexts are popped off one by one. For this reason, careless dependence on recursion can lead to the dreaded stack overflow runtime error

Algorithms: String Reversal, Palindrome, Integer Reversal, Fizz Buzz, Max Character, Anagrams, Vowels, Array Chunking, Reverse Array, Reverse Words, Capitalization, Caesar Cipher, Ransom Note, Mean; Median; and Mode, Two Sum, Max Profit, Sieve of Eratosthenes, Fibonacci, Memoized Fibonacci, Staircase, Pyramid, Matrix Spiral, Data Structure Algorithms,


Code: 	[
	Ex1: plus minus
		const arr = [-4, 3, -9, 0, 4, 1]
		let text = "";
		const hold = arr.reduce((acc, val, idx) => {
		  val > 0 ? pos++ : val < 0 ? neg++ : val === 0 ? zero++ : "test"
		  return [pos, neg, zero]
		}, [])

		hold.forEach((val, idx) => {
		  text += (hold[idx]/arr.length).toFixed(6) + "\n"
		})
		
	Ex2: Counting the occurrences
		result = info.reduce((acc, val) => {
		    return { ...acc, [val.name]: (acc[val.name] || 0) + 1 };
		  }, {});
		result = info.reduce(
		    (acc, val) => ((acc[val.name] = (acc[val.name] || 0) + 1), acc),
		    {}
		  );
]




[
Closure: Là một hàm có thể ghi nhớ nơi nó được tạo và truy cập được biến ở bên ngoài phạm vi của nó
Util: Viết code ngắn gọn hơn
	Biểu diễn, ứng dụng tính private trong oop
Notes:
	Biến được tham chiếu (refer) trong closure sẽ không được xóa khỏi bộ nhớ khi hàm cha thực thi xong
]

[
function myDisplayer(something) {
  document.getElementById("demo").innerHTML = something;
}

function myCalculator(num1, num2, myCallback) {
  let sum = num1 + num2;
  myCallback(sum);
}

myCalculator(5, 5, myDisplayer);

When you pass a function as an argument, remember not to use parenthesis.

Right: setTimeout(myFunction, 3000);

Wrong: setTimeout(myFunction(), 3000);

[
setInterval: Using to display the time every second (1000 milliseconds)

example:
setInterval(myFunction, 1000);

function myFunction() {
  let d = new Date();
  document.getElementById("demo").innerHTML=
  d.getHours() + ":" +
  d.getMinutes() + ":" +
  d.getSeconds();
}
]

[
Spread: if you have an array or object and you want the other array or object element get inside of the needed array, just put ...theNameOfArray just like this. The spread will conclude the other array into the needed array.
var object1 = {name: 'Javascript'}; var object2 = {price: 1000};
var object3 = { ...object1, ...object2};

if 2 array or object all of them got a key that are the same js gonna overwrite with the second key of the configered array or object

var defaultConfig = {
	api: 'https://facebook.com',
	apiVersion: 'v1',
	other: 'other',
};

var exerciseConfig = {
	...defaultConfig,
	api: 'https://facebook.com/bunsbof
};

Rest: if you too lazy to write down all the array or object elements just use the ...namedParameter then all of them will get inside the algorithm
function([a,b,...namedParameter]) {
	console.log(namedParameter);
}
]

[
Destructuring: same as object
var arr = ['Javascript', 'PHP', 'Ruby']
var [a, b, c] = arr;
var [a, ...rest] = arr;
]
