composer create-project --prefer-dist cakephp/app myapp
composer require cakephp/authentication

[
Using a structure like the following:
default - main project layout
parent - parent layout, extend from default
child-layout - child layout, extend from parent

Template files are stored in templates/, in a folder named after the controller that uses the files, and named after the action it corresponds to. For example, the view file for the Products controller's view() action, would normally be found in templates/Products/view.php

The view layer in CakePHP can be made up of a number of different parts. Each part has different uses:
	templates: Templates are the part of the page that is unique to the action being run. They form the meat of your application's response.
	elements: small, reusable bits of view code. Elements are usually redered inside views.
	layouts: template files that contain presentational code that wraps many interfaces in your application. Most views are rendered inside a layout.
	helpers: these classes encapsulate view logic that is needed in many places in the view layer. Among other things, helpers in CakePHP can help you build forms, build AJAX functionality, paginate model data, or serve RSS feeds.
	cells: these classes provide miniature controller-like features for creating self contained UI components.

View Variables:
	Any variables you set in your controller with set() will be available in both the view and the layout your action renders. In addition, any set variables will also be available in any element. If you need to pass additional variables from the view to the layout you can either call set() in the view template, or use View Blocks.
	You should rememeber to always escape any user data before outputting it as CakePHP does not automatically escape output. You can escape user content with the h() function:

<?= h($user->bio);?>

Setting View Variables
Cake\View\View::set(string $var, mixed $value)
Views have a set() method that is analogous to the set() found in Controller objects. Using set() from your view file will add the variables to the layout and elements that will be rendered later.
The Controller::set() method is the main way to send data from your controller to your view. Once you've used Controller::set(), the variable can be accessed in your view:

//First you pass data from the controller:
$this->set('color', 'pink');
//Then, in the view, you can utilize the data:
?>
You have selected <?= h($color)?> icing for the cake.
The Controller::set() method also takes an associative array as its first parameter. This can often be a quick way to assign a set of information to the view:

$data = [
	'color' => 'pink',
	'type' => 'sugar',
	'base_price' => 23.95
];
// Make $color, $type, and $base_price
// available to the view:
$this->set($data);
Keep in mind that view vars are shared among all parts rendered by your view. They will be available in all parts of the view: the template, the layout and all elements inside the former two.

Setting View Options
	If you want to customize the view class, layout/template paths, helpers or the theme that will be used when rendering the view, you can use the viewBuilder() method to get a builder. This builder can be used to define properties of the view before it is created:

$this->viewBuilder()
	->addHelper('MyCustom')
	->setTheme('Modern')
	->setClassName('Modern.Admin');

The above shows how you can load custom helpers, set the theme and use a custom view class.

Rendering a View
Cake\Controller\Controller::render(string $view, string $layout)
The Controller::render() method is automatically called at the end of each requested controller action. This method performs all the view logic (using the data you've submitted using the Controller::set() method), places the view inside its View::$layout, and serves it back to the end user.

The default view file used by render is determinded by convention. If the search() action of the RecipesController is requested, the view file in templates/Recipes/search.php will be rendered:

namespace App\Controller;
class RecipesController extends AppController
{
//...
public function search()
{
// Render the view in templates/Recipes/search.php
return $this->render();
}
//...
}
]