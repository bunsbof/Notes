intval($request->input('draw'))

[
Closure class:
	Class used to represent anonymous functions.
	Anonymous functions yield objects of this type. This class has methods that allow further control of the anonymous function after it has been created
	Besides the methods listed here, this class also has an __invoke method. This is for consistency with other classes that implement "calling magic", as this method is not used for calling the function.
	
]

[
Anonymous function:

When use anonymous function have to notice the scope (if the scope is outta the array_map function it will never be called)

public function index()
    {
        $take = 8;

        $arr = [
            0 => [
                "id" => 1,
                "name" => "Điện thoại"
            ],
            1 => [
                "id" => 3,
                "name" => "Phụ kiện di động"
            ],
            2 => [
                "id" => 73,
                "name" => "Tablet"
            ],
            3 => [
                "id" => 74,
                "name" => "Smartwatch"
            ],
            4 => [
                "id" => 78,
                "name" => "Điện thoại cũ"
            ],
            5 => [
                "id" => 80,
                "name" => "Tablet cũ"
            ],
            6 => [
                "id" => 81,
                "name" => "Smartwatch cũ"
            ]
        ];
        $categorys = array_map(function ($item) use ($take) {
            $child_arr = [
                0 => [
                    "id" => 68,
                    "name" => "Iphone"
                ],
                1 => [
                    "id" => 69,
                    "name" => "samsung"
                ],
                2 => [
                    "id" => 70,
                    "name" => "Xiaomi"
                ],
                3 => [
                    "id" => 71,
                    "name" => "Oppo"
                ]
            ];
            $child_arr = array_map(function ($childCategory) use ($take) {
                $products = [
                    0 => [
                        "id" => 292,
                        "categoryId" => 1,
                        "categoryIdLv2" => "68",
                        "name" => "iPhone X 64GB",
                        "SKU" => "ipX",
                        "images" => null,
                        "technicalPrice" => null,
                        "price" => 7500000.0,
                        "promotionPrice" => 6500000,
                        "quantity" => 20,
                        "sold" => 0,
                        "created_at" => "2022-05-11 18:23:18",
                        "updated_at" => "2022-07-21 22:26:10",
                        "meta_desc" => "iPhone X tại TStore - Đà lạt - Lâm Đồng",
                        "meta_keywords" => "iPhone X, iPhone X Đà Lạt, iPhone X Lâm Đồng, iPhone, iPhone Đà Lạt, iPhone Lâm Đồng, Đà Lạt, Lâm Đồng",
                        "title" => "iPhone X 64GB",
                        "meta_title" => "iPhone X tại TStore - Đà lạt - Lâm Đồng",
                        "brandId" => 1,
                        "status" => 1
                    ],
                    1 => [
                        "id" => 293,
                        "categoryId" => 1,
                        "categoryIdLv2" => "68",
                        "name" => "iPhone Xs 64GB",
                        "SKU" => "ipXs",
                        "images" => null,
                        "technicalPrice" => 6200000,
                        "price" => 8500000.0,
                        "promotionPrice" => 7500000,
                        "quantity" => 20,
                        "sold" => 0,
                        "created_at" => "2022-05-11 18:51:46",
                        "updated_at" => "2022-05-11 18:51:46",
                        "meta_desc" => "iPhone Xs tại TStore - Đà lạt - Lâm Đồng",
                        "meta_keywords" => "iPhone Xs, iPhone Xs Đà Lạt, iPhone Xs Lâm Đồng, iPhone, iPhone Đà Lạt, iPhone Lâm Đồng, Đà Lạt, Lâm Đồng",
                        "title" => "iPhone Xs 64GB",
                        "meta_title" => "iPhone Xs tại TStore - Đà lạt - Lâm Đồng",
                        "brandId" => 1,
                        "status" => 1
                    ],
                    2 => [
                        "id" => 294,
                        "categoryId" => 1,
                        "categoryIdLv2" => "68",
                        "name" => "iPhone 11 ProMax",
                        "SKU" => "ip11pm",
                        "images" => null,
                        "technicalPrice" => 14200000,
                        "price" => 17500000.0,
                        "promotionPrice" => 16500000,
                        "quantity" => 20,
                        "sold" => 0,
                        "created_at" => "2022-05-11 18:57:08",
                        "updated_at" => "2022-05-11 18:57:08",
                        "meta_desc" => "iPhone 11 ProMax tại TStore - Đà lạt - Lâm Đồng",
                        "meta_keywords" => "iPhone 11 ProMax, iPhone 11 ProMax Đà Lạt, iPhone 11 ProMax Lâm Đồng, iPhone, iPhone Đà Lạt, iPhone Lâm Đồng, Đà Lạt, Lâm Đồng",
                        "title" => "iPhone 11 ProMax",
                        "meta_title" => "iPhone 11 ProMax tại TStore - Đà lạt - Lâm Đồng",
                        "brandId" => 1,
                        "status" => 1
                    ],
                    3 => [
                        "id" => 295,
                        "categoryId" => 1,
                        "categoryIdLv2" => "68",
                        "name" => "iPhone 12 ProMax",
                        "SKU" => "ip12pm",
                        "images" => null,
                        "technicalPrice" => 19000000,
                        "price" => 24500000.0,
                        "promotionPrice" => 22500000,
                        "quantity" => 20,
                        "sold" => 0,
                        "created_at" => "2022-05-11 19:03:21",
                        "updated_at" => "2022-05-11 19:04:00",
                        "meta_desc" => "iPhone 12 ProMax  tại TStore - Đà lạt - Lâm Đồng",
                        "meta_keywords" => "iPhone 12 ProMax, iPhone 12 ProMax Đà Lạt, iPhone 12 ProMax Lâm Đồng, iPhone, iPhone Đà Lạt, iPhone Lâm Đồng, Đà Lạt, Lâm Đồng",
                        "title" => "iPhone 12 ProMax",
                        "meta_title" => "iPhone 12 ProMax  tại TStore - Đà lạt - Lâm Đồng",
                        "brandId" => 1,
                        "status" => 1
                    ],
                    4 => [
                        "id" => 296,
                        "categoryId" => 1,
                        "categoryIdLv2" => "68",
                        "name" => "iPhone 13 ProMax",
                        "SKU" => "ip13pm",
                        "images" => null,
                        "technicalPrice" => 2900000,
                        "price" => 31000000.0,
                        "promotionPrice" => 30000000,
                        "quantity" => 20,
                        "sold" => 0,
                        "created_at" => "2022-05-11 19:20:14",
                        "updated_at" => "2022-07-22 22:32:12",
                        "meta_desc" => "iPhone 13 ProMax  tại TStore - Đà lạt - Lâm Đồng",
                        "meta_keywords" => "iPhone 13 ProMax, iPhone 13 ProMax Đà Lạt, iPhone 13 ProMax Lâm Đồng, iPhone, iPhone Đà Lạt, iPhone Lâm Đồng, Đà Lạt, Lâm Đồng",
                        "title" => "iPhone 13 ProMax",
                        "meta_title" => "iPhone 13 ProMax  tại TStore - Đà lạt - Lâm Đồng",
                        "brandId" => 1,
                        "status" => 1
                    ],
                    5 => [
                        "id" => 297,
                        "categoryId" => 1,
                        "categoryIdLv2" => "68",
                        "name" => "1231",
                        "SKU" => "123",
                        "images" => null,
                        "technicalPrice" => 12345678,
                        "price" => 123457000.0,
                        "promotionPrice" => 123456,
                        "quantity" => 20,
                        "sold" => 0,
                        "created_at" => "2022-07-21 22:22:37",
                        "updated_at" => "2022-07-22 22:32:13",
                        "meta_desc" => "132",
                        "meta_keywords" => "123",
                        "title" => "123",
                        "meta_title" => "123",
                        "brandId" => 1,
                        "status" => 1
                    ],
                    6 => [
                        "id" => 298,
                        "categoryId" => 1,
                        "categoryIdLv2" => "68",
                        "name" => "1231",
                        "SKU" => "123",
                        "images" => null,
                        "technicalPrice" => 12345678,
                        "price" => 123457000.0,
                        "promotionPrice" => 123456,
                        "quantity" => 20,
                        "sold" => 0,
                        "created_at" => "2022-07-21 22:23:07",
                        "updated_at" => "2022-07-21 22:23:07",
                        "meta_desc" => "132",
                        "meta_keywords" => "123",
                        "title" => "123",
                        "meta_title" => "123",
                        "brandId" => 1,
                        "status" => 1
                    ],
                    7 => [
                        "id" => 301,
                        "categoryId" => 1,
                        "categoryIdLv2" => "68",
                        "name" => "1231",
                        "SKU" => "123",
                        "images" => null,
                        "technicalPrice" => 12345678,
                        "price" => 123457000.0,
                        "promotionPrice" => 123456,
                        "quantity" => 20,
                        "sold" => 0,
                        "created_at" => "2022-07-21 22:24:43",
                        "updated_at" => "2022-07-21 22:24:43",
                        "meta_desc" => "132",
                        "meta_keywords" => "123",
                        "title" => "123",
                        "meta_title" => "123",
                        "brandId" => 1,
                        "status" => 1
                    ]
                ];
                $childCategory["products"] = $products;
                //print_r($childCategory["products"]);
                //var_dump($childCategory["products"]);
                return $childCategory;
            }, $child_arr);
            //print_r($child_arr);
            $item["childrentCategory"] = $child_arr;
            return $item;
        }, $arr);
        dd($categorys);
    }

	Also known as closures, allow the creation of functions which have no specified name. They are most useful as the value of callable parameters, but they have many other uses.
	Anonymous functions are implemented using the Closure class.
Example:
<?php
echo preg_replace_callback('~-([a-z])~', function ($match) {
    return strtoupper($match[1]);
}, 'hello-world');
// outputs helloWorld
?>

Closures can also be used as the values of variables; PHP automatically converts such expressions into instances of the Closure internal class. Assigning a closure to a variable uses the same syntax as any other assignment, including the trailing semicolon:

Example: Anonymous function variable assignment example

<?php
$greet = function($name)
{
    printf("Hello %s\r\n", $name);
};

$greet('World');
$greet('PHP');
?>

Closures may also inherit variables from the parent scope. Any such variables must be passed to the use language construct. As of PHP 7.1, these variables must not include "superglobals", $this, or variables with the same name as a parameter. A return type declaration of the function has to be placed after the use clause.

Example Inheriting vaiables from the parent scope

<?php
$message = 'hello';

// No "use"
$example = function () {
    var_dump($message);
};
$example();

// Inherit $message
$example = function () use ($message) {
    var_dump($message);
};
$example();

// Inherited variable's value is from when the function
// is defined, not when called
$message = 'world';
$example();

// Reset message
$message = 'hello';

// Inherit by-reference
$example = function () use (&$message) {
    var_dump($message);
};
$example();

// The changed value in the parent scope
// is reflected inside the function call
$message = 'world';
$example();

// Closures can also accept regular arguments
$example = function ($arg) use ($message) {
    var_dump($arg . ' ' . $message);
};
$example("hello");

// Return type declaration comes after the use clause
$example = function () use ($message): string {
    return "hello $message";
};
var_dump($example());
?>

The above example will output something similar to:
NULL
string(5) "hello"
string(5) "hello"
string(5) "hello"
string(5) "world"
string(11) "hello world"
string(11) "hello world"

As of PHP 8.0.0, the list of scope-inherited variables may include a trailing comma, which will be ignored.
Inheriting variables from the parent scope is not the same as using global variables. Global variables exist in the global scope, which is the same no matter what function is executing. The parent scope of a closure is the function in which the closure was declared (not necessarily the function it was called from). See the following example:

Example Closures and scoping

<?php
// A basic shopping cart which contains a list of added products
// and the quantity of each product. Includes a method which
// calculates the total price of the items in the cart using a
// closure as a callback.
class Cart
{
    const PRICE_BUTTER  = 1.00;
    const PRICE_MILK    = 3.00;
    const PRICE_EGGS    = 6.95;

    protected $products = array();
    
    public function add($product, $quantity)
    {
        $this->products[$product] = $quantity;
    }
    
    public function getQuantity($product)
    {
        return isset($this->products[$product]) ? $this->products[$product] :
               FALSE;
    }
    
    public function getTotal($tax)
    {
        $total = 0.00;
        
        $callback =
            function ($quantity, $product) use ($tax, &$total)
            {
                $pricePerItem = constant(__CLASS__ . "::PRICE_" .
                    strtoupper($product));
                $total += ($pricePerItem * $quantity) * ($tax + 1.0);
            };
        
        array_walk($this->products, $callback);
        return round($total, 2);
    }
}

$my_cart = new Cart;

// Add some items to the cart
$my_cart->add('butter', 1);
$my_cart->add('milk', 3);
$my_cart->add('eggs', 6);

// Print the total with a 5% sales tax.
print $my_cart->getTotal(0.05) . "\n";
// The result is 54.29
?>

Example Automatic binding of $this
<?php

class Test
{
    public function testing()
    {
        return function() {
            var_dump($this);
        };
    }
}

$object = new Test;
$function = $object->testing();
$function();
    
?>
//Output
object(Test)#1 (0) {
}



]